-------------------------------------------------------------------------

Работа с образами (box)

-------------------------------------------------------------------------

Как мы уже говорили ранее, образы в vagrant называются - box.

В прошлый раз мы вводили команду - up и к нам закачивался необходимый образ.
Дело в том, что vagrant понял, что у нас стоит virtualbox и т.к. у нас данный образ еще не скачан, он скачал необходимый образ.

Лучше сами качать необхоимый образ, дабы небыло ошибок.

Посмотрим какие box у нас есть

$ vagrant box list
ubuntu/jammy64 (virtualbox, 20220531.0.0)

Скачаем сами напимер ubuntu (ubuntu/focal64)

$ vagrant box add --provider virtualbox debian/bullseye64

...

Теперь у нас два образа локально находятся.

$ vagrant box list
debian/bullseye64 (virtualbox, 11.20220328.1)
ubuntu/jammy64    (virtualbox, 20220531.0.0)





Давайте удалим debian

$ vagrant box remove debian/bullseye64

или более точная команда (она нужна если у вас много образов с одинаковым именем, но для разных провайдеров и/или разных версий)

$ vagrant box remove --provider virtualbox --box-version 11.20220328.1 debian/bullseye64
Removing box 'debian/bullseye64' (v11.20220328.1) with provider 'virtualbox'...

$ vagrant box list
ubuntu/jammy64 (virtualbox, 20220531.0.0)





Вот как можно обновить уже имеющийся локально образ (в нашем случае обновления не понадобились)

$ vagrant box update --box ubuntu/jammy64 --provider virtualbox

 ...

Проверить нужно ли образам/конкретному образу обновления (--global - для всех имеющихся образов)

$ vagrant box outdated --global
* 'ubuntu/jammy64' for 'virtualbox' (v20220531.0.0) is up to date


Удалить все старые версии образом, при том, что у нас есть новые

$ vagrant box prune

Кстати, можно выводить справку по каждой подкоманды, например

$ vagrant box remove --help




---------------------------------------------------------------------

Создание собственного vagrant box образа (вручную)

---------------------------------------------------------------------

Вы можете спросить, а зачем нам нужен собственный образ. Ответ прост. Мы хотим, чтобы у нас был образ в котором уже есть определенные утилиты и сервисы.
Например, мы хотим чтобы у нас был образ с LAMP и мы могли его быстро развернуть с помощью команды - vagrant init, vagrant up.

Вот документация с официального сайта - https://www.vagrantup.com/docs/boxes/base
а эта документация уже кассается именно создания образа для virtualBox - https://www.vagrantup.com/docs/providers/virtualbox/boxes
Мы будем следовать ей.

Требования к параметрам виртуальной машины.

- Оперативную память большую не надо делать. Примерно - 512МБ - 1021МБ. Как мы знаем данный параметр регулируется в Vagrantfile.
- Жесткий диск должен быть - dinamical allocated т.е. не фиксированного размера. Так же он не должен быть слишком маленьким.
- Процессор можно оставлять с одним ядром. Данный параметр тоже регулируется vagrantfile.
- Отключить флоппи, аудио, usb и т.д.
- Сетевой интерфейс долженн присувствовать и иметь тип - NAT.



Далее устанавливаем операционную систему. При установке нужно будет сделать такие вещи.

- Должен быть пользователь - vagrant с паролем - vagrant.
- Пароль у root долен быть - vagrant.
- Включить сетевой интерфейс. Он должет быть типа - DHCP.

Вот создали мы виртуальную машину с именем - Rocky-8.4.
Установили мы ситему (Rocky linux 8.4) и залогинились под - vagrant.


Делаем возможность пользователю vagrant выполнять команды sudo без пароля.

(machine) # sudo sudoedit /etc/sudoers

vagrant ALL=(ALL) NOPASSWD: ALL

Отключаем проверку DNS при подключении по ssh (для быстродействия соединения ,если нет интернета на гостевой машине).

(machine) # sudo vi /etc/ssh/sshd_config

UseDNS no

Для того, чтобы Vagrant мог полнофункционально работать с Vbox машинами (создавать шару и т.п.) нужно установить Дополнения гостевой ОС.
Для этого нужно вставить виртуальный диск в новосозданную ОС (Incert Guest Additions CD Image).

(machine) # sudo mount /dev/cdrom /mnt/
mount: /mnt: WARNING: device write-protected, mounted read-only.

(machine) # sudo dnf update

(machine) # sudo dnf groupinstall 'Development Tools'

(machine) # sudo dnf install "kernel-devel-$(uname -r)"

(machine) # sudo dnf install "kernel-headers-$(uname -r)"

(machine) # sudo dnf install "kernel-debug-devel-$(uname -r)"

Надо удостоверится, что версия ядра полностью совпадает с kernel пакетами. Иначе дополнения не установятся.

(machine) # uname -r

(machine) # ls /usr/src/kernels/

Устанавливаем дополнения

(machine) # sudo bash /mnt/VBoxLinuxAdditions.run

(machine) # sudo umount /dev/cdrom

Vagrant, по умолчанию, использует приватный ключ для подключения. Вот где он находится - https://github.com/hashicorp/vagrant/tree/main/keys
Мы эту ссылку нашли на официальном сайте (ссылки мы приводили ранее). Значит нам нужно скопировать vagrant.pub и сохранить как authorized_keys.

(machine) # dnf install wget

(machine) # mkdir /home/vagrant/.ssh

(machine) # curl -k https://raw.githubusercontent.com/hashicorp/vagrant/main/keys/vagrant.pub -o /home/vagrant/.ssh/authorized_keys

или

(machine) # wget --no-check-certificate https://raw.githubusercontent.com/hashicorp/vagrant/main/keys/vagrant.pub -O /home/vagrant/.ssh/authorized_keys

(machine) # cat .ssh/authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key

(machine) # chmod 700 /home/vagrant/.ssh/

(machine) # chmod 600 /home/vagrant/.ssh/authorized_keys

(machine) # sudo chown -R vagrant:vagrant /home/vagrant/.ssh

Также можно обновить «Message of the day» — это те сообщения, которые Вы видите, когда логинитесь в ОС.
Но это не обязательно.

(machine) # sudo dnf install -y redhat-lsb-core

Создаем скрипт

(machine) # sudo vi /usr/local/sbin/dynmotd.bash

********************************************************************************

#!/usr/bin/bash
#
# Text Color Variables http://misc.flogisoft.com/bash/tip_colors_and_formatting
tcLtG="\033[00;37m"    # LIGHT GRAY
tcDkG="\033[01;30m"    # DARK GRAY
tcLtR="\033[01;31m"    # LIGHT RED
tcLtGRN="\033[01;32m"  # LIGHT GREEN
tcLtBL="\033[01;34m"   # LIGHT BLUE
tcLtP="\033[01;35m"    # LIGHT PURPLE
tcLtC="\033[01;36m"    # LIGHT CYAN
tcW="\033[01;37m"      # WHITE
tcRESET="\033[0m"
tcORANGE="\033[38;5;209m"
#
# Time of day
HOUR=$( date +"%H" )
if [ $HOUR -lt 12  -a $HOUR -ge 0 ]; then TIME="morning"
elif [ $HOUR -lt 17 -a $HOUR -ge 12 ]; then TIME="afternoon"
else TIME="evening"
fi
#
# System uptime
uptime=$( cat /proc/uptime | cut -f1 -d. )
upDays=$((uptime/60/60/24))
upHours=$((uptime/60/60%24))
upMins=$((uptime/60%60))
#
# System + Memory
SYS_LOADS=$( cat /proc/loadavg | awk '{print $1}' )
MEMORY_USED=$( free -b | grep Mem | awk '{print $3/$2 * 100.0}' )
SWAP_USED_RAW=$( free -b | grep Swap | awk '{print $3}' )
if [ $SWAP_USED_RAW -eq 0 ]
then
  SWAP_USED=0
else
  SWAP_USED=$( free -b | grep Mem | awk '{print $3/$2 * 100}' )
fi
NUM_PROCS=$( ps aux | wc -l )
IPADDRESS=$( hostname --all-ip-addresses )
RELEASE=$( lsb_release -s -d | sed 's/"//g' )
#
echo -e $tcDkG "==============================================================="
echo -e $tcLtG " Good $TIME !                        $tcORANGE Denis Bochinskii"
echo -e $tcDkG "==============================================================="
echo -e $tcLtG "                                                        "
echo -e $tcLtG " This is Vagrant Box version - $( cat /etc/box-version )"
echo -e $tcLtG " - Hostname      :$tcW $( hostname -f )"
echo -e $tcLtG " - IP Address    :$tcW $IPADDRESS"
echo -e $tcLtG " - Release       :$tcW $RELEASE"
echo -e $tcLtG " - Kernel        : $( uname -a | awk '{print $1" "$3" "$12}' )"
echo -e $tcLtG " - Users         : Currently `users | wc -w` user(s) logged on"
echo -e $tcLtG " - Server Time   : `date`"
echo -e $tcLtG " - System load   : $SYS_LOADS / $NUM_PROCS processes running"
echo -e $tcLtG " - Memory used % : $MEMORY_USED"
echo -e $tcLtG " - Swap used %   : $SWAP_USED"
echo -e $tcLtG " - System uptime : $upDays days $upHours hours $upMins minutes"
echo -e $tcDkG "==============================================================="
echo -e $tcRESET ""
#

********************************************************************************

(machine) # sudo chmod 0777 /usr/local/sbin/dynmotd.bash

(machine) # sudo vi /etc/profile.d/dynamic_motd.sh

**********************

# Dynamic motd
if [ $LOGNAME != "root" ]; then
        /usr/local/sbin/dynmotd.bash
fi


**********************

Правило хорошего тона будет указать версию box (мы к ней будем обращаться в скрипте - dynmotd.bash).
Если вы будите обновлять версию box, то просто изменяйте данное значение.

(machine) # cat /etc/box-version

***************

1.0.0

***************




Ну, теперь все готова для создания box. Но, перед созданием вы можете установить все необходимое, что вам нужно.
Давайте для примера установим дополнительные репозитори и популярные утилиты для администраторов.

(machine) # sudo dnf install epel-release
(machine) # sudo dnf install dnf-utils http://rpms.remirepo.net/enterprise/remi-release-8.rpm
(machine) # sudo dnf install bind-utils
(machine) # sudo dnf install net-tools


Ну все, создаем образ. Переходим в хостовую машину.

$ mkdir ./Rocky-Linux-8.4 && cd ./Rocky-Linux-8.4

$ vagrant package --base Rocky-8.4 --output Linux-Rocky-8.4

==> Rocky-8.4: Exporting VM...
==> Rocky-8.4: Compressing package to: /vagrant/Rocky-Linux-8.4/Linux-Rocky-8.4

Теперь у нас появился образ виртуальной машины (vagranr box)
$ ls -lh
total 1,3G
-rw-rw-r-- 1 denisb denisb 1,3G окт 20 12:13 Linux-Rocky-8.4

Добавим его в список доступных box.

$ vagrant box list

ubuntu/jammy64 (virtualbox, 20220531.0.0)

$ vagrant box add Linux-Rocky-8.4 --name Rocky-Linux/8.4
==> box: Box file was not detected as metadata. Adding it directly...
==> box: Adding box 'Rocky-Linux/8.4' (v0) for provider:
    box: Unpacking necessary files from: file:///vagrant/Rocky-Linux-8.4/Linux-Rocky-8.4

Вот появился "наш" box с установленной Rocky Linux 8.4

$ vagrant box list

Rocky-Linux/8.4 (virtualbox, 0)
ubuntu/jammy64 (virtualbox, 20220531.0.0)


Теперь проверим

$ vagrant init Rocky-Linux/8.4

$ vagrant up

...

Зайдем по ssh.

# vagrant ssh
Last login: Wed Oct 20 12:07:58 2021
 ===============================================================
  Good afternoon !                         Denis Bochinskii
 ===============================================================

  This is Vagrant Box version - 1.0.0
  - Hostname      : localhost
  - IP Address    : 10.0.2.15
  - Release       : Rocky Linux release 8.4 (Green Obsidian)
  - Kernel        : Linux 4.18.0-305.3.1.el8_4.x86_64 x86_64
  - Users         : Currently 1 user(s) logged on
  - Server Time   : Ср окт 20 12:31:18 MSK 2021
  - System load   : 1.01 / 94 processes running
  - Memory used % : 28.9356
  - Swap used %   : 0
  - System uptime : 0 days 0 hours 0 minutes
 ===============================================================

[vagrant@localhost ~]$

Ну, что же. Все работает. Теперь можно регестрироваться на Vagran Cloud и заливать образ туда.
