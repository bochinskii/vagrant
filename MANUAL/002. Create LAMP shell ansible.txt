------------------------------------------------------------

Установка LAMP на виртуальную машину (используем shell)

------------------------------------------------------------

Установим LAMP стэк используя сперва - bash, а потом - ansible.


--------
Bash way
--------

$ mkdir ./002_Create_LAMP_with_ansible/shell_bash && cd ./002_Create_LAMP_with_ansible/shell_bash

Ознакомиться с Vagragntfile файлом можно в директории с проектом

$ vagrant up

...

Можно проверять.

Не забываем удалить инфраструктуру, если она вам н нужна

$ vagrant destroy

------------------------------------------------------------

Установка LAMP на виртуальную машину (используем ansible)

------------------------------------------------------------

$ cd ../shell_ansible

Для начала нужно разобраться с ssh ключами. Они используются не только
для ssh доступа к виртуальной машине, но и для ansible. Таким образом возник вопрос.
Если ключи генерируются автоматически vagrant при создании машины, как мы их должны
вписать в настройки ansible?

На самом деле ответ прост. При использовании ansible, во время команды - up,
vagrant генерирует автоматически inventory файл (.vagrant/provisioners/ansible/inventory/vagrant_ansible_inventory).

Но для рассмотрения большего количества настроек vagrant'а, мы немного усложним себе
задачу и будем использовать "свои" ключи, а также укажем "свой" inventory файл.

Если не хотите заморачиваться с "дополнительной" настройкой для ansible, то можете посмотреть
в директорию light_verison. Там рабочий вариант без лишних настроек.

Если же хотите "заморочится", то давайте дальше.

Подготавливаем SSH ключи, которыми мы будем пользоваться.

$ mkdir keys

$ ssh-keygen -b 4096 -t rsa -f ./keys/lamp-jammy.key -C vagrant

$ ls -l keys/
total 8
-rw------- 1 denisb denisb 3369 июн  3 17:36 lamp-jammy.key
-rw-r--r-- 1 denisb denisb  733 июн  3 17:36 lamp-jammy.key.pub


Подготавливаем все, что необходимо для использования ansible

$ mkdir provisioning
$ mkdir provisioning/{group_vars,data}
$ echo "<h1>Test page (ansible)</h1>" > provisioning/data/index.html
$ echo "<?php phpinfo(); ?>" > provisioning/data/info.php

$ cat > provisioning/hosts <<EOF
[centos]
lamp-ubuntu ansible_host=192.168.0.200
EOF


$ cat > provisioning/group_vars/ubuntu <<EOF
---

ansible_connection: ssh
ansible_port: 22
ansible_user: vagrant
ansible_ssh_private_key_file: ../keys/lamp-jammy.key
EOF


Создаем playbook. С ним вы можете ознакомиться в диреткории с проектом

----------------------------------------------------------------------------
Заметка:

Как видно из playbook, мы использовали модули, которые не поставляются по-умолчанию
в старых версиях ansible. Если у вас старая версия - ниже 2.0.0, то возможно вам нужно
будет выпонить команды, которые приведенны ниже

Для того, чтобы использовать parted

$ ansible-galaxy collection install community.general

Для возможности монтирования дисков

$ ansible-galaxy collection install ansible.posix

----------------------------------------------------------------------------

----------------------------------------------------------------------------------
Важно:

Имя виртуальной машины в hots (lamp-jammy) файле должно быть таким же как в Vagrantfile
(config.vm.define, config.vm.hostname, vb.name).

-----------------------------------------------------------------------------------

Ну и создаем Vagrantfile, с которым  можно ознакомитсья в директории с проектом



Немного удилим время и опишем Vagrantfile.

config.ssh.insert_key - мы запрещаем использовать автосгенерированный ключ
т.к. мы будем использовать "свой" (хотя тут не все так просто).

config.ssh.private_key_path - путь к "нашему" приватному ключу.

Тут, если вы заметили мы указали два пути. Один путь к "нашему" ключу, а другой к автоматически сгенерированному.
Дело в том, что vagrant сперва должен как-то подключиться к машине, а без ключа это не возможно.
Поэтому, он генерирует публичный ключ на основе - insecure_private_key, далее выполняет
первоначальные настройки, потом заменяет на свой публичный ключ на "наш".

С помощью кода - Add public key мы добавляем "свой" публичный ключ к пользователю vagrant в созданную виртуальную машину.

Далее, мы настроили сетевой интерфейс, а именно добавили ip адрес и маршрут по-умолчанию
(в прошлый раз маршрут по-умолчанию мы задавали с помощью - shell)

С помощью кода - Ansible Settings мы указали playbook и "свой" inventory файл.

Запускаем.

$ export VAGRANT_EXPERIMENTAL="disks"

$ vagrant up

...

PLAY [LAMP Installation] *******************************************************

TASK [Gathering Facts] *********************************************************
ok: [lamp-jammy]

TASK [Install apache2] *********************************************************
changed: [lamp-jammy]

TASK [Create a new ext4 primary partition] *************************************
changed: [lamp-jammy]

TASK [Create a ext4 filesystem on /dev/sdc1] ***********************************
changed: [lamp-jammy]

TASK [Mount sdc1 to /var/www/html] *********************************************
changed: [lamp-jammy]

TASK [Start apache2 server] ****************************************************
ok: [lamp-jammy]

TASK [Copy content] ************************************************************
changed: [lamp-jammy] => (item=index.html)
changed: [lamp-jammy] => (item=info.php)

TASK [Install PHP] *************************************************************
changed: [lamp-jammy]

TASK [Start PHP-FPM server] ****************************************************
ok: [lamp-jammy]

TASK [Install MariaDB] *********************************************************
changed: [lamp-jammy]

TASK [Start MariaDB server] ****************************************************
ok: [lamp-jammy]

RUNNING HANDLER [Restart_Apache] ***********************************************
changed: [lamp-jammy]

PLAY RECAP *********************************************************************
lamp-jammy                 : ok=12   changed=8    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0


Все работает, можно проверять
