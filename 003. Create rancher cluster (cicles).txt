--------------------------------------------------------------------------

Развертывание Rancher кластера

-------------------------------------------------------------------------

Rancher - это сервер управления Kubernetes кластерами.

Для рассмотрения возможностей vagrant, которые, мы еще не посмотрели, развернем такую инфраструктуру.
- Сервер Rancher;
- Ноды - 3 штуки (на которых будут запускаться приложения в контейнерах)

Для наполняемости Vagrantfile сделаем так.
Сервер - rancher будет иметь два дополнительных сетевых интерфейсов: bridg (192.168.0.200/24), hostonly (10.1.1.200/24).
Ноды будут иметь только один дополнительный интерфейс - hostonly (10.1.1.201/24 - 10.1.1.203/24).
Таким образом ноды будут подключаться к rancher через данный приватный (hostonly) интерфейс.


$ mkdir ./003_Create_rancher_cluster_with_circles && cd ./003_Create_rancher_cluster_with_circles

Тут опять же, если не хотите заморачиваться с "дополнительной" настройкой для ansible, то можете посмотреть
в директорию light_verison. Там рабочий вариант без лишних настроек.

Если же хотите "заморочится", то давайте дальше.

$ mkdir {keys,provisioning}

$ mkdir provisioning/group_vars

Генрируем ключи

# ssh-keygen -b 4096 -t rsa -f keys/rancher-cluster.key -C vagrant

----------------------------------------------------------------------------
Заметка:

Как видно из playbook, мы использовали модули, которые не поставляются по-умолчанию
в старых версиях ansible. Если у вас старая версия - ниже 2.0.0, то возможно вам нужно
будет выпонить команды, которые приведенны ниже

Для того, чтобы использовать parted

$ ansible-galaxy collection install community.general

Для возможности монтирования дисков

$ ansible-galaxy collection install ansible.posix

Для работы ansible с docker

$ ansible-galaxy collection install community.docker

----------------------------------------------------------------------------



Тут мы придумали переменную - nodename_prefix для того, чтобы потом фильтровать в playbook.

$ cat > provisioning/hosts <<EOF
[rancher_cluster]
rancher	      ansible_host=10.1.1.200   nodename_prefix=ranchers
node-001      ansible_host=10.1.1.201   nodename_prefix=nodes
node-002      ansible_host=10.1.1.202   nodename_prefix=nodes
node-003      ansible_host=10.1.1.203   nodename_prefix=nodes
EOF


$ cat > provisioning/group_vars/rancher_cluster <<EOF
---

ansible_connection: ssh
ansible_port: 22
ansible_user: vagrant
ansible_ssh_private_key_file: ../keys/rancher-cluster.key
EOF

Создаем Playbook. С ним можно ознакомится в директории с проектом

Тут мы просто на все сервера сделали все что необходимо для установки docker.
На сервере - rancher запустили контейнер с rancher сервером (v2.4-head).
На нодах для изящности добавили в hosts файл ip адрес и имя rancher сервера.


Ну, и теперь подготавливаем Vagrantfile. С ним так же можно ознакомиться в
директории с проектом


Тут чуток опишем.

В прошлый раз мы весь код писали в основном контексте


Vagrant.configure("2") do |config|

# Bla bla bla

end


Это нормально, когда нам нужно запустить одну виртуальную машину в одном Vagrantfile.

Но что делать если нам нужно несколько машин (как в нашем случае)

Вот ответ - директива define.
Кстати, мы в прошлый раз уже использовали данную директиву - config.vm.define "lamp-jammy".
Но она может иметь более сложную структуру, которая используется для того, чтобы
описать параметры касающиеся именно определенной машины.


config.vm.define "server1" do |server1|

# Bla bla bla

end


config.vm.define "server2" do |server2|

# Bla bla bla

end


Далее, для создания нод, мы использовали всю туже директиву - define, но с цыклом.
Дело в том, что ноды у нас идентичные, поэтому чтобы не повторять код, мы использовали цикл.


(1..3).each do |i|
  config.vm.define "node-00#{i}" do |node|


  end

end



Все что общее для всех серверов мы описали в контексте - configure, а именно создание ssh ключа, а так же настройки ansible.



Теперь, запустим vagrant

# vagrant up



Проверим, что rancher работает
# curl -I --insecure https://rancher.int

HTTP/1.1 200 OK
Content-Type: application/json
Expires: Wed 24 Feb 1982 18:42:00 GMT
X-Api-Cattle-Auth: false
X-Api-Schemas: https://rancher.int/meta/schemas
X-Content-Type-Options: nosniff
Date: Sun, 17 Oct 2021 09:57:36 GMT

Или можно зайти через web интерфейс и создать кластер.


Ну, и не забываем удалять

$ vagrant destroy
